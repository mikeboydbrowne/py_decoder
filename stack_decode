#!/usr/bin/env python
import optparse
import sys
import models
from collections import namedtuple

optparser = optparse.OptionParser()
optparser.add_option("-i", "--input", dest="input", default="data/input", help="File containing sentences to translate (default=data/input)")
optparser.add_option("-t", "--translation-model", dest="tm", default="data/tm", help="File containing translation model (default=data/tm)")
optparser.add_option("-l", "--language-model", dest="lm", default="data/lm", help="File containing ARPA-format language model (default=data/lm)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to decode (default=no limit)")
optparser.add_option("-k", "--translations-per-phrase", dest="k", default=1, type="int", help="Limit on number of translations to consider per phrase (default=1)")
optparser.add_option("-s", "--stack-size", dest="s", default=1, type="int", help="Maximum stack size (default=1)")
optparser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,  help="Verbose mode (default=off)")
opts = optparser.parse_args()[0]

# TM contains tuples of words
tm = models.TM(opts.tm, opts.k)
lm = models.LM(opts.lm)
french = [tuple(line.strip().split()) for line in open(opts.input).readlines()[:opts.num_sents]]

def extract_english(h):
  return "" if h.predecessor is None else "%s%s " % (extract_english(h.predecessor), h.phrase.english)

# tm should translate unknown words as-is with probability 1
for word in set(sum(french,())):
  if (word,) not in tm:
    tm[(word,)] = [models.phrase(word, 0.0)]

sys.stderr.write("Decoding %s...\n" % (opts.input,))
for french_sentence in french:

  # print 'Length: ' + str(len(french_sentence))
  # for i in range((len(french_sentence) - 1), 0, -1):
  #   print i

  # The following code implements a monotone decoding
  # algorithm (one that doesn't permute the target phrases).
  # Hence all hypotheses in stacks[i] represent translations of
  # the first i words of the input sentence. You should generalize
  # this so that they can represent translations of *any* i words.

  # create named tuple so its easier to deal with the values we are working on
  hypothesis = namedtuple("hypothesis", "logprob, lm_state, translated, predecessor, phrase")
  initial_hypothesis = hypothesis(0.0, lm.begin(), [False for _ in range(len(french_sentence) - 1, -1, -1)], None, None)

  print len(french_sentence)

  # initialize an array of dictionaries of size n [n = sentence length]
  stacks = [{} for _ in french_sentence]

  # place empty hypothesis onto stack 0
  stacks[0][lm.begin()] = initial_hypothesis

  # for all stacks 0...n-1  do
  for _, stack in enumerate(stacks):

    # for all hypotheses in stack do
    for current_hypothesis in sorted(stack.itervalues(), key=lambda h: -h.logprob)[:opts.s]:

      # getting not translated positions
      untranslated = []

      # running through positions in the sentence
      for i in range(len(current_hypothesis.translated) - 1, -1, -1):

        # if not translated
        if not current_hypothesis.translated[i]:

          # add position to the list of untranslated positions
          untranslated.append(i)

      # getting untranslated phrase groups
      phrases = []
      from itertools import groupby
      from operator import itemgetter
      for key, group in groupby(enumerate(untranslated), lambda (index, item): index - item):
        group = map(itemgetter(1), group)
        print group
        if len(group) > 1:
          phrases.append(xrange(group[0], group[-1]))
        else:
          phrases.append(group[0])

      print phrases

      # for the remaining untranslated words or phrases
      for j in phrases:

        # if its a phrase
        if not isinstance(j, int):

          # for every word position in the phrase
          for l in j:

            # for every other word position in the phrase
            for m in j:

              # number of words tranlsted in this iteration
              numWords = l - m + 1

              # number of words translated in previous iteration
              numTranslated = 0
              for p in current_hypothesis.translated:
                if current_hypothesis.translated[p]:
                  numTranslated += 1

              # is the resulting subset phrase in the translation model?
              if french_sentence[l:m] in tm:

                # for each of the translations in the translation model:
                for phrase in tm[french_sentence[l:m]]:

                  # add the logprob for this phrase to that of the current hypothesis
                  logprob = current_hypothesis.logprob + phrase.logprob

                  # get the current state of the language model
                  current_lm_state = current_hypothesis.lm_state

                  # for word in phrase.english.split():
                  #   (current_lm_state,word_logprob) = lm.score(current_lm_state, wor)
                  #   logprob += word_logprob

                  # adding the probability that it's the end of the sentence
                  logprob += lm.end(current_lm_state) if l == len(french_sentence) else 0.0

                  # getting the array of words in the french sentence that are translated
                  new_translated = current_hypothesis.translated;

                  # altering newly translated words' state in array
                  for n in range(m, l, -1):
                    new_translated[n] = True

                  # creating a new hypothesis
                  new_hypothesis = hypothesis(logprob, current_lm_state, new_translated, current_hypothesis, phrase)

                  # add hypothesis to the stack that represents the number of words translated
                  if current_lm_state not in stacks[numTranslated + numWords] or stacks[j][current_lm_state].logprob < logprob:
                    stacks[numTranslated + numWords][current_lm_state] = new_hypothesis


        # if its a singleton word
        else:
          print j


    #       # not really looping over phrases here in the k=1 case, this line is akin to phrase = tm[french_sentence[i:j]]
    #       for phrase in tm[french_sentence[i:j]]:

    #         # add the logprob for this phrase to the logprob of the current hypothesis
    #         logprob = current_hypothesis.logprob + phrase.logprob

    #         # extract the current state of the language model
    #         current_lm_state = current_hypothesis.lm_state

    #         # find the log prob of each word in the phrase, given the current language models state
    #         # then add the logprob into the logprob tally for this phrase
    #         for word in phrase.english.split():
    #           (current_lm_state, word_logprob) = lm.score(current_lm_state, word)
    #           logprob += word_logprob

    #         # add the log prob that this is the end of the sentence (once we hit the end)
    #         logprob += lm.end(current_lm_state) if j == len(french_sentence) else 0.0

    #         # create a new hypothesis value given the current set of data
    #         new_hypothesis = hypothesis(logprob, current_lm_state, current_hypothesis, phrase)

    #         # add it to the current stack for the state if that state's stack is empty, or if the log prob is lower
    #         if current_lm_state not in stacks[j] or stacks[j][current_lm_state].logprob < logprob: # second case is recombination
    #           stacks[j][current_lm_state] = new_hypothesis

  # take the lowest absolute log prob value as our winnar
  # winner = max(stacks[-1].itervalues(), key=lambda h: h.logprob)

  # print extract_english(winner)

  # # such verbose
  # if opts.verbose:
  #   def extract_tm_logprob(h):
  #     return 0.0 if h.predecessor is None else h.phrase.logprob + extract_tm_logprob(h.predecessor)
  #   tm_logprob = extract_tm_logprob(winner)
  #   sys.stderr.write("LM = %f, TM = %f, Total = %f\n" %
  #     (winner.logprob - tm_logprob, tm_logprob, winner.logprob))
